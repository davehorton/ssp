# Makefile.in generated by automake 1.9.6 from Makefile.am.
# libsofia-sip-ua/http/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#
# Makefile.am for http module
#
# Copyright (C) 2005,2006 Nokia Corporation
# Contact: Pekka Pessi <pekka.pessi@nokia.com>
# Licensed under LGPL. See file COPYING.

# ----------------------------------------------------------------------
# Header paths

# common Makefile targets for libsofia-sip-ua(-glib) modules
# ----------------------------------------------------------

#
# run tests with valgrind
#

# Copyright (C) 2007 Nokia Corporation.

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.

# This file contains free software from Makefile.in by the Free Software
# Foundation:

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

#
# Generate lcov output
#

#
# Copyright (C) 2007 Nokia Corporation
# Contact: Pekka Pessi <pekka.pessi@nokia.com>
# Licensed under LGPL. See file COPYING.
#

# Silent compilation w/ Automake 1.9 or 1.10
# ----------------------------------------------------------

# Automake 1.9.6 is not clever enough to override suffix rules within if
# if SOFIA_COMPILE_SILENT


srcdir = .
top_srcdir = ../..

pkgdatadir = $(datadir)/sofia-sip
pkglibdir = $(libdir)/sofia-sip
pkgincludedir = $(includedir)/sofia-sip
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-apple-darwin11.4.2
host_triplet = x86_64-apple-darwin11.4.2
target_triplet = x86_64-apple-darwin11.4.2
check_PROGRAMS = test_http$(EXEEXT)
DIST_COMMON = $(nobase_include_sofia_HEADERS) $(srcdir)/Doxyfile.in \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/rules/lcov.am $(top_srcdir)/rules/silent.am \
	$(top_srcdir)/rules/sofia.am $(top_srcdir)/rules/valcheck.am \
	ChangeLog

# Use with --enable-ndebug
#am__append_1 = -DNDEBUG
am__append_2 = --frames
am__append_3 = lcov lcov-report lcov-rerun clean-lcov covcheck uncovered
subdir = libsofia-sip-ua/http
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/m4/sac-coverage.m4 \
	$(top_srcdir)/m4/sac-general.m4 \
	$(top_srcdir)/m4/sac-openssl.m4 $(top_srcdir)/m4/sac-su2.m4 \
	$(top_srcdir)/m4/sac-tport.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h \
	$(top_builddir)/libsofia-sip-ua/su/sofia-sip/su_configure.h
CONFIG_CLEAN_FILES = Doxyfile
LTLIBRARIES = $(noinst_LTLIBRARIES)
libhttp_la_LIBADD =
am__objects_1 =
am__objects_2 = http_tag.lo http_parser_table.lo
am__objects_3 = $(am__objects_1) $(am__objects_2) http_tag_ref.lo
am_libhttp_la_OBJECTS = http_parser.lo http_header.lo http_basic.lo \
	http_extra.lo http_inlined.lo http_status.lo http_tag_class.lo \
	$(am__objects_3)
libhttp_la_OBJECTS = $(am_libhttp_la_OBJECTS)
test_http_SOURCES = test_http.c
test_http_OBJECTS = test_http.$(OBJEXT)
test_http_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
test_http_DEPENDENCIES = libhttp.la ../bnf/libbnf.la ../msg/libmsg.la \
	../url/liburl.la ../ipt/libipt.la ../su/libsu.la \
	$(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir) -I$(top_builddir)/libsofia-sip-ua/su/sofia-sip
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
SOURCES = $(libhttp_la_SOURCES) test_http.c
DIST_SOURCES = $(libhttp_la_SOURCES) test_http.c
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(include_sofiadir)"
nobase_include_sofiaHEADERS_INSTALL = $(install_sh_DATA)
HEADERS = $(nobase_include_sofia_HEADERS)
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Users/dhorton/beachdog-enterprises/beachdog-networks/git/ssp/deps/sofia-sip-1.12.11/missing --run aclocal-1.9
ACLOCAL_AMFLAGS = -I m4
ALLOCA = 
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /Users/dhorton/beachdog-enterprises/beachdog-networks/git/ssp/deps/sofia-sip-1.12.11/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /Users/dhorton/beachdog-enterprises/beachdog-networks/git/ssp/deps/sofia-sip-1.12.11/missing --run autoconf
AUTOHEADER = ${SHELL} /Users/dhorton/beachdog-enterprises/beachdog-networks/git/ssp/deps/sofia-sip-1.12.11/missing --run autoheader
AUTOMAKE = ${SHELL} /Users/dhorton/beachdog-enterprises/beachdog-networks/git/ssp/deps/sofia-sip-1.12.11/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O0 -DDEBUG
CHECK_CFLAGS = 
CHECK_LIBS = 
COREFOUNDATION_FALSE = 
COREFOUNDATION_TRUE = #
COVERAGE_FLAGS = 
CPP = gcc -E
CPPFLAGS = -DDEBUG
CWFLAG = 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DOXYGEN = echo
DSYMUTIL = dsymutil
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ENABLE_COVERAGE_FALSE = 
ENABLE_COVERAGE_TRUE = #
ETAGS = etags
EXEEXT = 
EXPENSIVE_CHECKS_FALSE = 
EXPENSIVE_CHECKS_TRUE = #
FGREP = /usr/bin/grep -F
GCOV = 
GENHTML = 
GENPNG = 
GLIB_CFLAGS = -I/opt/local/include/glib-2.0 -I/opt/local/lib/glib-2.0/include -I/opt/local/include  
GLIB_LIBS = -L/opt/local/lib -lglib-2.0 -lintl  
GLIB_VERSION = 
GREP = /usr/bin/grep
HAVE_CHECK_FALSE = 
HAVE_CHECK_TRUE = #
HAVE_DOXYGEN_FALSE = 
HAVE_DOXYGEN_TRUE = #
HAVE_GENPNG_FALSE = #
HAVE_GENPNG_TRUE = 
HAVE_GLIB_FALSE = #
HAVE_GLIB_TRUE = 
HAVE_LCOV_FALSE = #
HAVE_LCOV_TRUE = 
HAVE_MINGW32_FALSE = 
HAVE_MINGW32_TRUE = #
HAVE_NTH_FALSE = #
HAVE_NTH_TRUE = 
HAVE_NTLM_FALSE = 
HAVE_NTLM_TRUE = #
HAVE_STUN_FALSE = #
HAVE_STUN_TRUE = 
HAVE_TLS_FALSE = #
HAVE_TLS_TRUE = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LCOV = 
LD = ld
LDFLAGS = 
LIBOBJS = 
LIBS = -lpthread 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIBVER_SOFIA_SIP_UA_AGE = 6
LIBVER_SOFIA_SIP_UA_CUR = 6
LIBVER_SOFIA_SIP_UA_GLIB_AGE = 0
LIBVER_SOFIA_SIP_UA_GLIB_CUR = 3
LIBVER_SOFIA_SIP_UA_GLIB_REV = 0
LIBVER_SOFIA_SIP_UA_GLIB_SOVER = 3
LIBVER_SOFIA_SIP_UA_REV = 0
LIBVER_SOFIA_SIP_UA_SOVER = 0
LIPO = lipo
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAINTAINER_MODE_FALSE = 
MAINTAINER_MODE_TRUE = #
MAKEINFO = ${SHELL} /Users/dhorton/beachdog-enterprises/beachdog-networks/git/ssp/deps/sofia-sip-1.12.11/missing --run makeinfo
MINGW_ENVIRONMENT = 
MOSTLYCLEANFILES = *.bb *.bbg *.da *.gcov *.gcda *.gcno
NDEBUG_FALSE = 
NDEBUG_TRUE = #
NM = /usr/bin/nm
NMEDIT = nmedit
OBJDUMP = false
OBJEXT = o
OTOOL = otool
OTOOL64 = :
PACKAGE = sofia-sip
PACKAGE_BUGREPORT = 
PACKAGE_NAME = sofia-sip
PACKAGE_STRING = sofia-sip 1.12.11
PACKAGE_TARNAME = sofia-sip
PACKAGE_URL = 
PACKAGE_VERSION = 1.12.11
PATH_SEPARATOR = :
PKG_CONFIG = /opt/local/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
RANLIB = ranlib
REPLACE_LIBADD =  memspn.lo memcspn.lo
SED = /usr/bin/sed
SET_MAKE = 
SHELL = /bin/sh
SOFIA_CFLAGS = 
SOFIA_GLIB_CFLAGS = 
SOFIA_GLIB_PKG_REQUIRES = glib-2.0
SOFIA_PLAT_CFLAGS = 
STRIP = strip
TESTS_ENVIRONMENT = 
VERSION = 1.12.11
VER_LIBSOFIA_SIP_UA_MAJOR_MINOR = 1.12
ac_ct_CC = gcc
ac_ct_DUMPBIN = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-apple-darwin11.4.2
build_alias = 
build_cpu = x86_64
build_os = darwin11.4.2
build_vendor = apple
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-apple-darwin11.4.2
host_alias = 
host_cpu = x86_64
host_os = darwin11.4.2
host_vendor = apple
htmldir = ${docdir}
include_sofiadir = ${includedir}/sofia-sip-1.12
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /Users/dhorton/beachdog-enterprises/beachdog-networks/git/ssp/deps/sofia-sip-1.12.11/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
lt_ECHO = echo
mandir = ${datarootdir}/man
mkdir_p = $(install_sh) -d
oldincludedir = /usr/include
openssl_CFLAGS = -I/opt/local/include  
openssl_LIBS = -L/opt/local/lib -lssl -lcrypto  
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = x86_64-apple-darwin11.4.2
target_alias = 
target_cpu = x86_64
target_os = darwin11.4.2
target_vendor = apple
INCLUDES = -I$(srcdir)/../bnf -I../bnf \
		-I$(srcdir)/../msg -I../msg \
		-I$(srcdir)/../url -I../url \
		-I$(srcdir)/../su -I../su -I../su


# ----------------------------------------------------------------------
# Build targets
noinst_LTLIBRARIES = libhttp.la
TESTS = test_http

# ----------------------------------------------------------------------
# Rules for building the targets
PUBLIC_H = sofia-sip/http.h sofia-sip/http_header.h \
			sofia-sip/http_parser.h sofia-sip/http_tag_class.h \
			sofia-sip/http_status.h sofia-sip/http_hclasses.h

BUILT_H = sofia-sip/http_protos.h sofia-sip/http_tag.h
BUILT_C = http_tag.c http_parser_table.c
BUILT_SOURCES = $(BUILT_H) $(BUILT_C) http_tag_ref.c
nobase_include_sofia_HEADERS = $(BUILT_H) $(PUBLIC_H)
libhttp_la_SOURCES = $(INTERNAL_H) \
			http_parser.c http_header.c \
			http_basic.c http_extra.c http_inlined.c \
			http_status.c http_tag_class.c \
			$(BUILT_SOURCES)

COVERAGE_INPUT = $(libhttp_la_SOURCES) $(include_sofia_HEADERS)
LDADD = libhttp.la ../bnf/libbnf.la ../msg/libmsg.la ../url/liburl.la \
	../ipt/libipt.la ../su/libsu.la $(openssl_LIBS)
test_http_LDFLAGS = -static

# ----------------------------------------------------------------------
# Install and distribution rules
EXTRA_DIST = http.docs \
			sofia-sip/http_protos.h.in \
			sofia-sip/http_tag.h.in \
			http_parser_table.c.in \
			http_tag.c.in

sofiasrcdir = ${top_srcdir}/libsofia-sip-ua
sofiabuilddir = ${top_builddir}/libsofia-sip-ua
AM_CFLAGS = $(CWFLAG) $(SOFIA_COVERAGE) $(SOFIA_CFLAGS) \
	$(openssl_CFLAGS) $(SOFIA_PLAT_CFLAGS) $(am__append_1)
SOFIA_COVERAGE = $(COVERAGE_FLAGS)
DISTCLEANFILES = $(BUILT_SOURCES)

# rules for building tag files
TAG_AWK = ${sofiasrcdir}/su/tag_dll.awk
SUFFIXES = _tag_ref.c _tag.c
INTERNAL_INCLUDES = \
    -I${sofiasrcdir}/features -I${sofiabuilddir}/features \
    -I${sofiasrcdir}/ipt -I${sofiabuilddir}/ipt \
    -I${sofiasrcdir}/iptsec -I${sofiabuilddir}/iptsec \
    -I${sofiasrcdir}/bnf -I${sofiabuilddir}/bnf \
    -I${sofiasrcdir}/http -I${sofiabuilddir}/http \
    -I${sofiasrcdir}/msg -I${sofiabuilddir}/msg \
    -I${sofiasrcdir}/nth -I${sofiabuilddir}/nth \
    -I${sofiasrcdir}/nta -I${sofiabuilddir}/nta \
    -I${sofiasrcdir}/nea -I${sofiabuilddir}/nea \
    -I${sofiasrcdir}/nua -I${sofiabuilddir}/nua \
    -I${sofiasrcdir}/soa -I${sofiabuilddir}/soa \
    -I${sofiasrcdir}/sdp -I${sofiabuilddir}/sdp \
    -I${sofiasrcdir}/sip -I${sofiabuilddir}/sip \
    -I${sofiasrcdir}/soa -I${sofiabuilddir}/soa \
    -I${sofiasrcdir}/sresolv -I${sofiabuilddir}/sresolv \
    -I${sofiasrcdir}/tport -I${sofiabuilddir}/tport \
    -I${sofiasrcdir}/stun -I${sofiabuilddir}/stun \
    -I${sofiasrcdir}/url -I${sofiabuilddir}/url \
    -I${sofiasrcdir}/su -I${sofiabuilddir}/su

PHONY = built-sources clean-built-sources $(am__append_3)
VALGRIND = valgrind
VALGRINDFLAGS = --tool=memcheck

# Scripts
LCOV_UNCOVERED = ${top_srcdir}/scripts/uncovered
LCOV_REPORT = ${top_srcdir}/scripts/lcov-report

# Report directory
lcovdir = ${top_builddir}/lcov

# Options
GENHTML_OPTIONS = --show-details --legend \
	$(am__append_2)

# Fancy shell command that expands to directory relative to top_builddir
expand_subdir = `pwd|sed "s'\`cd ${top_builddir};pwd\`''"`
SOFIA_SILENT = @
LIBTOOL_FLAGS = --silent

# From Automake 1.9.6 - 
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(LIBTOOL_FLAGS) \
	$(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)

LINK = ${SOFIA_SILENT}test "${SOFIA_SILENT}" != @ || echo '	 LINK $@'; \
	$(LIBTOOL) --tag=CC --mode=link $(LIBTOOL_FLAGS) \
	$(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@


# ----------------------------------------------------------------------
# Sofia specific rules
TAG_DLL_FLAGS = DLLREF=1
MSG_PARSER_AWK = ${srcdir}/../msg/msg_parser.awk
AWK_HTTP_AWK = LC_ALL=C ${AWK} -f ${MSG_PARSER_AWK} module=http
SS_HTTP_H = ${srcdir}/sofia-sip/http.h
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: _tag_ref.c _tag.c .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am $(top_srcdir)/rules/sofia.am $(top_srcdir)/rules/valcheck.am $(top_srcdir)/rules/lcov.am $(top_srcdir)/rules/silent.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  libsofia-sip-ua/http/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  libsofia-sip-ua/http/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
Doxyfile: $(top_builddir)/config.status $(srcdir)/Doxyfile.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libhttp.la: $(libhttp_la_OBJECTS) $(libhttp_la_DEPENDENCIES) 
	$(LINK)  $(libhttp_la_LDFLAGS) $(libhttp_la_OBJECTS) $(libhttp_la_LIBADD) $(LIBS)

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
test_http$(EXEEXT): $(test_http_OBJECTS) $(test_http_DEPENDENCIES) 
	@rm -f test_http$(EXEEXT)
	$(LINK) $(test_http_LDFLAGS) $(test_http_OBJECTS) $(test_http_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/http_basic.Plo
include ./$(DEPDIR)/http_extra.Plo
include ./$(DEPDIR)/http_header.Plo
include ./$(DEPDIR)/http_inlined.Plo
include ./$(DEPDIR)/http_parser.Plo
include ./$(DEPDIR)/http_parser_table.Plo
include ./$(DEPDIR)/http_status.Plo
include ./$(DEPDIR)/http_tag.Plo
include ./$(DEPDIR)/http_tag_class.Plo
include ./$(DEPDIR)/http_tag_ref.Plo
include ./$(DEPDIR)/test_http.Po

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-nobase_include_sofiaHEADERS: $(nobase_include_sofia_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(include_sofiadir)" || $(mkdir_p) "$(DESTDIR)$(include_sofiadir)"
	@$(am__vpath_adj_setup) \
	list='$(nobase_include_sofia_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  $(am__vpath_adj) \
	  echo " $(nobase_include_sofiaHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(include_sofiadir)/$$f'"; \
	  $(nobase_include_sofiaHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(include_sofiadir)/$$f"; \
	done

uninstall-nobase_include_sofiaHEADERS:
	@$(NORMAL_UNINSTALL)
	@$(am__vpath_adj_setup) \
	list='$(nobase_include_sofia_HEADERS)'; for p in $$list; do \
	  $(am__vpath_adj) \
	  echo " rm -f '$(DESTDIR)$(include_sofiadir)/$$f'"; \
	  rm -f "$(DESTDIR)$(include_sofiadir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/../../rules $(distdir)/sofia-sip
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(include_sofiadir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
#clean-local:
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	clean-noinstLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-nobase_include_sofiaHEADERS

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am uninstall-nobase_include_sofiaHEADERS

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	clean-noinstLTLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man \
	install-nobase_include_sofiaHEADERS install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-info-am \
	uninstall-nobase_include_sofiaHEADERS


built-sources: $(BUILT_SOURCES)

clean-built-sources:
	-rm -rf $(BUILT_SOURCES) $(BUILT_SOURCES:%=$(srcdir)/%)

*_tag_ref.c: $(TAG_AWK)

_tag.c_tag_ref.c:
	$(AWK) -f $(TAG_AWK) NODLL=1 $(TAG_DLL_FLAGS) REF=$@ $<

../bnf/libbnf.la ../http/libhttp.la ../ipt/libipt.la ../iptsec/libiptsec.la \
 ../msg/libmsg.la ../nea/libnea.la ../nta/libnta.la ../nth/libnth.la \
 ../nua/libnua.la ../sdp/libsdp.la ../sip/libsip.la ../soa/libsoa.la \
 ../sresolv/libsresolv.la ../stun/libstun.la ../su/libsu.la \
 ../tport/libtport.la ../url/liburl.la:
	cd $(@D) && $(MAKE) $(@F)

checklib: $(noinst_LTLIBRARIES) $(check_LTLIBRARIES)

valcheck: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) valcheck-am

valcheck-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) valcheck-TESTS

# Run tests with valgrind in
valcheck-TESTS:	$(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if case $$tst in \
            run*) VALGRIND="$(VALGRIND) $(VALGRINDFLAGS)" \
		  $(TESTS_ENVIRONMENT) $${dir}$$tst ;; \
	    *) $(TESTS_ENVIRONMENT) $(VALGRIND) $(VALGRINDFLAGS) \
	       $${dir}$$tst ;; \
	    esac ; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

#
# Generate pretty coverage report (unless it has been already done)
#
lcov:
	@-test -r ${lcovdir}${expand_subdir}/lcov.info \
	|| make lcov-report

# Generate pretty coverage report based on current coverage data
lcov-report:
	sub=${expand_subdir} odir=${lcovdir}$$sub ; \
	rm -rf $$odir ; mkdir -p $$odir && \
	${LCOV_REPORT} ${GENHTML_OPTIONS} \
          --title "${PACKAGE_NAME}-${PACKAGE_VERSION}$$sub" \
	  --srcdir=${srcdir} -o $$odir

# Rerun checks before generating report
lcov-rerun: clean-lcov
	$(MAKE) $(AM_MAKEFLAGS) check
	$(MAKE) $(AM_MAKEFLAGS) lcov-report

# Show all uncovered lines as errors
uncovered:
	${LCOV_UNCOVERED} --lcov-dir=${lcovdir} --srcdir=${srcdir}

# Run check in current dir and show all uncovered lines as errors
covcheck:
	-find . -name "*.gcda" | xargs rm -rf
	$(MAKE) $(AM_MAKEFLAGS) check
	${LCOV_UNCOVERED} --lcov-dir=${lcovdir} --srcdir=${srcdir}

clean-local::
	-rm -rf ${lcovdir}`pwd|sed "s'\`cd ${top_builddir};pwd\`''"`
	find . -name "*.gcda" | xargs rm -f || true

clean-lcov:
	-rm -rf ${lcovdir}`pwd|sed "s'\`cd ${top_builddir};pwd\`''"`
	find . -name "*.gcda" | xargs rm -f || true

# Rules from depend2.am (GENERIC = TRUE, SUBDIROBJ = FALSE, %FASTDEP% = am_fastdepCC) silenced. 
.c.o:
	@test "${SOFIA_SILENT}" != @ || echo '	 COMPILE $@'
	${SOFIA_SILENT}if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	${SOFIA_SILENT}source='$<' object='$@' libtool=no \
#	DEPDIR="$(DEPDIR)" $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c -o $@ $<
##	${SOFIA_SILENT}$(COMPILE) -c -o $@ $<

.c.lo:
	@test "${SOFIA_SILENT}" != @ || echo '	 LTCOMPILE $@'
	${SOFIA_SILENT}if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	${SOFIA_SILENT}source='$<' object='$@' libtool=yes \
#	DEPDIR="$(DEPDIR)" $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<
##	${SOFIA_SILENT}$(LTCOMPILE) -c -o $@ $<

# endif

${BUILT_H} ${BUILT_C}: ${srcdir}/sofia-sip/http.h ${MSG_PARSER_AWK}

sofia-sip/http_protos.h: ${srcdir}/sofia-sip/http_protos.h.in
	@-mkdir sofia-sip 2>/dev/null || true
	${AWK_HTTP_AWK} PR=$@ TEMPLATE=${srcdir}/sofia-sip/http_protos.h.in ${SS_HTTP_H}

sofia-sip/http_tag.h: ${srcdir}/sofia-sip/http_tag.h.in
	@-mkdir sofia-sip 2>/dev/null || true
	${AWK_HTTP_AWK} PR=$@ TEMPLATE=${srcdir}/sofia-sip/http_tag.h.in ${SS_HTTP_H}

http_tag.c: ${srcdir}/http_tag.c.in
	${AWK_HTTP_AWK} PR=$@ TEMPLATE=${srcdir}/http_tag.c.in ${SS_HTTP_H}

http_parser_table.c: ${srcdir}/http_parser_table.c.in
	${AWK_HTTP_AWK} PT=$@ TEMPLATE=${srcdir}/http_parser_table.c.in \
		MC_HASH_SIZE=127 ${SS_HTTP_H}
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
