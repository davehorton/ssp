[/
              Copyright Andrey Semashev 2007 - 2012.
     Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
              http://www.boost.org/LICENSE_1_0.txt)

    This document is a part of Boost.Log library documentation.
/]

[section:attributes Attributes]

Every attribute supported by the library must derive from the [class_log_attribute] interface. This interface has a single virtual method named `get_value`. This method should return the actual attribute value object, embedded into the [class_log_attribute_value] interface object. Such separation allows implementing attributes that can return different values at different time points (like clock-related attributes, for example) and, on the other hand, allows using different values of the same attribute independently.

The attribute value object is mostly intended to store the actual attribute value and implement type dispatching in order to be able to extract the stored value. One should not confuse the attribute value object type and the stored value type. The former is in most cases not needed by users and is hidden behind the [class_log_attribute_value] interface, but the latter is needed to be able to extract the value. For brevity we call the stored attribute value type simply the attribute value type in this documentation.

[section:constant Constants]

    #include <``[boost_log_attributes_constant_hpp]``>

The most simple and frequently used attribute type is a constant value of some type. This kind of attribute is implemented with the [class_attributes_constant] class template. The template is parametrized with the attribute value type. The constant value should be passed to the attribute constructor. Here is an example:

    void foo()
    {
        src::logger lg;

        // Register a constant attribute that always yields value -5
        boost::shared_ptr< attrs::attribute > attr(new attrs::constant< int >(-5));
        lg.add_attribute("MyInteger", attr);

        // Register another constant attribute. Make it a string this time.
        attr.reset(new attrs::constant< std::string >("Hello world!"));
        lg.add_attribute("MyString", attr);
    }

That's it, there's nothing much you can do with a constant attribute. Constants are very useful when one wants to highlight some log records or just pass some data to a sink backend (e.g. pass statistical parameters to the collector).

[endsect]

[section:mutable_constant Mutable constants]

    #include <``[boost_log_attributes_mutable_constant_hpp]``>

This kind of attribute is an extension for the [link log.detailed.attributes.constant constant attribute]. In addition to being able to store some value, the [class_attributes_mutable_constant] class template has two distinctions:

* it allows modification of the stored value without re-registering the attribute
* it allows synchronization of the stores and readings of the stored value

In order to change the stored value of the attribute, one must call the `set_value` method:

    void foo()
    {
        src::logger lg;

        // Register a mutable constant attribute that always yields value -5
        typedef attrs::mutable_constant< int > int_constant_t;
        boost::shared_ptr< int_constant_t > attr(new int_constant_t(-5));
        lg.add_attribute("MyInteger", attr);
        BOOST_LOG(lg) << "This record has MyInteger == -5";

        // Change the attribute value
        attr->set_value(100);
        BOOST_LOG(lg) << "This record has MyInteger == 100";
    }

In multithreaded applications the `set_value` method calls must be serialized with the `get_value` calls (which, generally speaking, happen on every log record being made). By default [class_attributes_mutable_constant] does not serialize calls in any way, assuming that the user will do so externally. However, the [class_attributes_mutable_constant] template provides three additional template arguments: synchronization primitive type, scoped exclusive lock type and scoped shareable lock type. If a synchronization primitive type is specified, the scoped exclusive lock type is a mandatory parameter. If the scoped shareable lock type is not specified, the attribute will fall back to the exclusive lock instead of shared locks. For example:

    // This mutable constant will always lock exclusively
    // either for reading or storing the value
    typedef attrs::mutable_constant<
        int,                                        // attribute value type
        boost::mutex,                               // synchronization primitive
        boost::lock_guard< boost::mutex >           // exclusive lock type
    > exclusive_mc;
    boost::shared_ptr< exclusive_mc > my_int1;

    // This mutable constant will use shared clocking for reading the value
    // and exclusive locking for storing
    typedef attrs::mutable_constant<
        int,                                        // attribute value type
        boost::shared_mutex,                        // synchronization primitive
        boost::unique_lock< boost::shared_mutex >,  // exclusive lock type
        boost::shared_lock< boost::shared_mutex >   // shared lock type
    > shared_mc;
    boost::shared_ptr< shared_mc > my_int2;

    BOOST_LOG_DECLARE_GLOBAL_LOGGER_INIT(my_logger, src::logger_mt)
    {
        src::logger_mt lg;

        my_int1.reset(new exclusive_mc(10));
        lg.add_attribute("MyInteger1", my_int1);

        my_int2.reset(new shared_mc(20));
        lg.add_attribute("MyInteger2", my_int2);

        return lg;
    }

    void foo()
    {
        src::logger_mt& lg = get_my_logger();

        // This is safe, even if executed in multiple threads
        my_int1->set_value(200);
        BOOST_LOG(lg) << "This record has MyInteger1 == 200";

        my_int2->set_value(300);
        BOOST_LOG(lg) << "This record has MyInteger2 == 300";
    }

Mutable constants are often used as auxiliary attributes inside loggers to store attributes that may change on some events. As opposed to regular constants, which would require re-registering in case of value modification, mutable constants allow modifying the value in-place.

[endsect]

[section:counter Counters]

    #include <``[boost_log_attributes_counter_hpp]``>

Counters are one of the simplest attributes that generate a new value each time requested. Counters are often used to identify log records or to count some events, e.g. accepted network connections. The class template [class_attributes_counter] provides such functionality. This template is parametrized with the counter value type, which should support arithmetic operations, such as `operator +` and `operator -`. The counter attribute allows specification of the initial value and step (which can be negative) on construction.

    BOOST_LOG_DECLARE_GLOBAL_LOGGER_INIT(my_logger, src::logger_mt)
    {
        src::logger_mt lg;

        // This counter will count lines, starting from 0
        lg.add_attribute("LineCounter", boost::make_shared< attrs::counter< unsigned int >());

        // This counter will count backwards, starting from 100 with step -5
        lg.add_attribute("CountDown", boost::make_shared< attrs::counter< int >(100, -5));

        return lg;
    }

    void foo()
    {
        src::logger_mt& lg = get_my_logger();
        BOOST_LOG(lg) << "This record has LineCounter == 0, CountDown == 100";
        BOOST_LOG(lg) << "This record has LineCounter == 1, CountDown == 95";
        BOOST_LOG(lg) << "This record has LineCounter == 2, CountDown == 90";
    }

[note Don't expect that the log records with the [class_attributes_counter] attribute will always have ascending or descending counter values in the resulting log. In multithreaded applications counter values acquired by different threads may come to a sink in any order. See [link log.rationale.why_weak_record_ordering Rationale] for a more detailed explanation on why it can happen. For this reason it is more accurate to say that the [class_attributes_counter] attribute generates an identifier in an ascending or descending order rather than that it counts log records in either order.]

[endsect]

[section:clock Wall clock]

    #include <``[boost_log_attributes_clock_hpp]``>

One of the "must-have" features of any logging library is support for attaching a time stamp to every log record. The library provides two attributes for this purpose: `utc_clock` and `local_clock`. The former returns the current UTC time and the latter returns the current local time. In either case the returned time stamp is acquired with the maximum precision for the target platform. The attribute value is `boost::posix_time::ptime` (see __boost_date_time__). The usage is quite straightforward:

    BOOST_LOG_DECLARE_GLOBAL_LOGGER(my_logger, src::logger_mt)

    void foo()
    {
        logging::core::get()->add_global_attribute(
            "TimeStamp",
            boost::make_shared< attrs::local_clock >());

        // Now every log record ever made will have a time stamp attached
        src::logger_mt& lg = get_my_logger();
        BOOST_LOG(lg) << "This record has a time stamp";
    }

[endsect]

[section:timer Stop watch (timer)]

    #include <``[boost_log_attributes_timer_hpp]``>

The [class_attributes_timer] attribute is very useful when there is a need to estimate the duration of some prolonged process. The attribute returns the time elapsed since the attribute construction. The attribute value type is `boost::posix_time::ptime::time_duration_type` (see __boost_date_time__).

    // The class represents a single peer-to-peer connection
    class network_connection
    {
        src::logger m_Logger;

    public:
        network_connection()
        {
            m_Logger.add_attribute("Duration", boost::make_shared< attrs::timer >());
            BOOST_LOG(m_Logger) << "Connection established";
        }
        ~network_connection()
        {
            // This log record will show the whole life time duration of the connection
            BOOST_LOG(m_Logger) << "Connection closed";
        }
    };

The attribute provides high resolution of the time estimation and can even be used as a simple in-place performance profiling tool.

[tip The [class_attributes_timer] attribute can even be used to profile the code in different modules without recompiling them. The trick is to wrap an expensive call to a foreign module with the thread-specific [class_attributes_timer] [link log.detailed.attributes.related_components.scoped_attributes scoped attribute], which will markup all log records made from within the module with time readings.]

[endsect]

[section:named_scope Named scopes]

    #include <``[boost_log_attributes_named_scope_hpp]``>

The logging library supports maintaining scope stack tracking during the application's execution. This stack may either be written to log or be used for other needs (for example, to save the exact call sequence that led to an exception when throwing one). Each stack element contains the following information (see the [class_attributes_basic_named_scope_entry] structure template definition):

* Scope name. It can be defined by the user or generated by the compiler, but in any case it [_must be a constant string literal] (see [link log.rationale.why_str_lit Rationale]).
* Source file name, where the scope begins. It is usually a result of the standard `__FILE__` macro expansion. Like the scope name, the file name [_must be a constant string literal].
* Line number in the source file. Usually it is a result of the standard `__LINE__` macro expansion.

The scope stack is implemented through thread-specific global storage internally. There is a [class_attributes_basic_named_scope] (`named_scope` and `wnamed_scope` typedefs for narrow and wide-character logging, respectively) attribute that allows hooking this stack into the logging pipeline. This attribute generates value of the nested type `named_scope::scope_stack` which is the instance of the scope stack. The attribute can be registered in the following way:

    logging::core::get()->add_global_attribute("Scope", boost::make_shared< attrs::named_scope >());

Note that it is perfectly valid to register the attribute globally because the scope stack is thread-local anyway. This will also implicitly add scope tracking to all threads of the application, which is often exactly what we need.

Now we can mark execution scopes with the macros `BOOST_LOG_FUNCTION` and `BOOST_LOG_NAMED_SCOPE` (the latter accepts the scope name as an argument). These macros automatically add source position information to each scope entry. An example follows:

    void foo(int n)
    {
        // Mark the scope of the function foo
        BOOST_LOG_FUNCTION();

        switch (n)
        {
        case 0:
            {
                // Mark the current scope
                BOOST_LOG_NAMED_SCOPE("case 0");
                BOOST_LOG(lg) << "Some log record";
                bar(); // call some function
            }
            break;

        case 1:
            {
                // Mark the current scope
                BOOST_LOG_NAMED_SCOPE("case 1");
                BOOST_LOG(lg) << "Some log record";
                bar(); // call some function
            }
            break;

        default:
            {
                // Mark the current scope
                BOOST_LOG_NAMED_SCOPE("default");
                BOOST_LOG(lg) << "Some log record";
                bar(); // call some function
            }
            break;
        }
    }

After executing `foo` we will be able to see in the log that the `bar` function was called from `foo` and, more precisely, from the case statement that corresponds to the value of `n`. This may be very useful when tracking down subtle bugs that show up only when `bar` is called from a specific location (e.g. if `bar` is being passed invalid arguments in that particular location).

Another good use case is attaching the scope stack information to an exception. With the help of __boost_exception__, this is possible:

    typedef boost::error_info<
        struct tag_scopes,
        attrs::named_scope::scope_stack
    > scopes_info;

    void bar(int x)
    {
        BOOST_LOG_FUNCTION();

        if (x < 0)
        {
            // Attach a copy of the current scope stack to the exception
            throw boost::enable_error_info(std::range_error("x must not be negative"))
                << scopes_info(attrs::named_scope::get_scopes());
        }
    }

    void foo()
    {
        BOOST_LOG_FUNCTION();

        try
        {
            bar(-1);
        }
        catch (std::range_error& e)
        {
            // Acquire the scope stack from the exception object
            BOOST_LOG(lg) << "bar call failed: " << e.what() << ", scopes stack:\n"
                << *boost::get_error_info< scopes_info >(e);
        }
    }

[note We do not inject the `named_scope` attribute into the exception. Since scope stacks are maintained globally, throwing an exception will cause stack unwinding and, as a result, will truncate the global stack. Instead we create a copy of the scope stack at the throw site. This copy will be kept intact even if the global stack instance changes during stack unwinding.]

[endsect]

[section:process_id Current process identifier]

    #include <``[boost_log_attributes_current_process_id_hpp]``>

It is often useful to know the process identifier that produces the log, especially if the log can eventually combine the output of different processes. The [class_attributes_current_process_id] attribute is a constant that formats into the current process identifier. The value type of the attribute can be determined by the `current_process_id::held_type` typedef.

    void foo()
    {
        logging::core::get()->add_global_attribute(
            "ProcessID",
            boost::make_shared< attrs::current_process_id >());
    }

[endsect]

[section:thread_id Current thread identifier]

    #include <``[boost_log_attributes_current_thread_id_hpp]``>

Multithreaded builds of the library also support the [class_attributes_current_thread_id] attribute which yields the `boost::thread::id` (see __boost_thread__) specific to the calling thread upon value acquisition. The usage is similar to the process id.

    void foo()
    {
        logging::core::get()->add_global_attribute(
            "ThreadID",
            boost::make_shared< attrs::current_thread_id >());
    }

[tip You may have noticed that the attribute is registered globally. This will not result in all threads having the same ThreadID in log records as the attribute will always return a thread-specific value. The additional benefit is that you don't have to do a thing in the thread initialization routines to have the thread-specific attribute value in log records.]

[endsect]

[section:functor Function objects as attributes]

    #include <``[boost_log_attributes_functor_hpp]``>

This attribute is a simple wrapper around a user-defined function object. Each attempt to acquire the attribute value results in the function object call. The result of the call is returned as the attribute value (this implies that the function must not return `void`). The functor attribute can be constructed with the `make_functor_attr` helper function, like this:

    void foo()
    {
        logging::core::get()->add_global_attribute(
            "MyRandomAttr",
            attrs::make_functor_attr(&std::rand));
    }

Auto-generated function objects, like the ones defined in __boost_bind__ or STL, are also supported.

[note Some deficient compilers may not support `result_of` construct properly. This metafunction is used in the `make_functor_attr` function to automatically detect the return type of the function object. If `result_of` breaks, one can try to explicitly specify the return type of the function object as a template argument to the `make_functor_attr` function.]

[endsect]

[section:related_components Other attribute-related components]

[section:attribute_name Attribute names]

    #include <``[boost_log_attributes_attribute_name_hpp]``>

TODO

[endsect]

[section:attribute_set Attribute set]

    #include <``[boost_log_attributes_attribute_set_hpp]``>

TODO

[endsect]

[section:attribute_values_view Attribute values view]

    #include <``[boost_log_attributes_attribute_values_view_hpp]``>

TODO

[endsect]

[section:extractors Attribute value extraction and visitation]

    #include <``[boost_log_attributes_value_extraction_hpp]``>
    #include <``[boost_log_attributes_value_visitation_hpp]``>

TODO: Need to update with respect to the separated API for visitation and extraction.

Attribute value extractors serve as a helper tool on top of [link log.detailed.utilities.type_dispatch type dispatchers] in order to simplify extracting attribute values in generic code. The functionality is implemented in the `attribute_value_extractor` class template, parametrized on character type and type or MPL sequence of types that have to be supported for dispatch. The `attribute_value_extractor` instance is a binary function object that accepts a set of attribute values and another function object that will receive the extracted attribute value. The name of the attribute to be extracted is given as the constructor argument to the extractor. The key advantage of using extractors instead of raw dispatchers is that the receiving function object can have a template `operator ()`. Obviously, this allows reducing the amount of code when similar processing is needed for attributes of different types. For example:

    // A generic function object that outputs attribute value
    struct print_attribute_value
    {
        typedef void result_type;

        // This operator will be instantiated for all possible types of the attribute value
        template< typename T >
        void operator() (T const& value) const
        {
            std::cout << "Received " << logging::type_info_wrapper(typeid(T)).pretty_name()
                << " attribute value: " << value << std::endl;
        }
    };

    void foo(attribute_values_view const& attrs)
    {
        // Let's assume we want to output the value of the
        // attribute "MyAttr" that may have any numeric type
        logging::attribute_value_extractor< char, logging::numeric_types > extractor1("MyAttr");
        assert(extractor1(attrs, print_attribute_value()));

        // The extractor returns false if it is unable to extract the value
        logging::attribute_value_extractor< char, std::complex< double > > extractor2("MyAttr");
        assert(!extractor2(attrs, print_attribute_value()));
    }

Note that the predefined type sequences provided by the library can be used freely with extractors just as well as with filters and formatters. Also note that specifying a single type of the attribute value instead of type sequence is also perfectly valid.

The library also provides an `extract` convenience function that automatically creates extractor object. The `foo` function from the example above can be rewritten like this:

    void foo(attribute_values_view const& attrs)
    {
        assert(extract< logging::numeric_types >("MyAttr", attrs, print_attribute_value()));
        assert(!extract< std::complex< double > >("MyAttr", attrs, print_attribute_value()));
    }

[endsect]

[section:scoped_attributes Scoped attributes]

    #include <``[boost_log_attributes_scoped_attribute_hpp]``>

Scoped attributes are a powerful mechanism of tagging log records that can be used for different purposes. As the naming implies, scoped attributes are registered in the beginning of a scope and unregistered on the end of the scope. The mechanism includes the following four macros:

    BOOST_LOG_SCOPED_LOGGER_ATTR(logger, attr_name, attr_type);
    BOOST_LOG_SCOPED_LOGGER_ATTR_CTOR(logger, attr_name, attr_type, attr_ctor_args);

    BOOST_LOG_SCOPED_THREAD_ATTR(attr_name, attr_type);
    BOOST_LOG_SCOPED_THREAD_ATTR_CTOR(attr_name, attr_type, attr_ctor_args);

The former two register a source-specific attribute in the `logger` logger object. The attribute name and type are given in the `attr_name` and `attr_type` arguments. The BOOST_LOG_SCOPED_LOGGER_ATTR_CTOR additionally accepts a __boost_preprocessor__ sequence of arguments that should be passed to the attribute constructor. The latter pair of macros do exactly the same but the attribute is registered for the current thread in the logging core (which does not require a logger).

[note If an attribute with the same name is already registered in the logger/logging core, the macros won't override the existing attribute and will eventually have no effect. See [link log.rationale.why_weak_scoped_attributes Rationale] for a more detailed explanation of the reasons for such behavior.]

Usage example follows:

    BOOST_LOG_DECLARE_GLOBAL_LOGGER(my_logger, src::logger_mt)

    void foo()
    {
        // This log record will also be marked with the "Tag" attribute,
        // whenever it is called from the A::bar function.
        // It will not be marked when called from other places.
        BOOST_LOG(get_my_logger()) << "A log message from foo";
    }

    struct A
    {
        src::logger m_Logger;

        void bar()
        {
            // Set a thread-wide markup tag.
            // Note the additional parentheses to form a Boost.PP sequence.
            BOOST_LOG_SCOPED_THREAD_ATTR_CTOR("Tag",
                attrs::constant< std::string >, ("Called from A::bar"));

            // This log record will be marked
            BOOST_LOG(m_Logger) << "A log message from A::bar";

            foo();
        }
    };

    int main(int, char*[])
    {
        src::logger lg;

        // Let's measure our application run time
        BOOST_LOG_SCOPED_LOGGER_ATTR(lg, "RunTime", attrs::timer);

        // Mark application start.
        // The "RunTime" attribute should be nearly 0 at this point.
        BOOST_LOG(lg) << "Application started";

        // Note that no other log records are affected by the "RunTime" attribute.
        foo();

        A a;
        a.bar();

        // Mark application ending.
        // The "RunTime" attribute will show the execution time elapsed.
        BOOST_LOG(lg) << "Application ended";

        return 0;
    }

It is quite often convenient to mark a group of log records with a constant value in order to be able to filter the records later. The library provides two convenience macros just for this purpose:

    BOOST_LOG_SCOPED_LOGGER_TAG(logger, tag_name, tag_type, tag_value);
    BOOST_LOG_SCOPED_THREAD_TAG(tag_name, tag_type, tag_value);

The macros are effectively wrappers around `BOOST_LOG_SCOPED_LOGGER_ATTR_CTOR` and `BOOST_LOG_SCOPED_THREAD_ATTR_CTOR`, respectively. For example, the "Tag" scoped attribute from the example above can be registered like this:

    // Note there is no "attrs::constant" type wrapping
    // and no additional parenthesis around the tag value.
    BOOST_LOG_SCOPED_THREAD_TAG("Tag", std::string, "Called from A::bar");

[warning When using scoped attributes, make sure that the scoped attribute is not altered in the attribute set in which it was registered. For example, one should not clear or reinstall the attribute set of the logger if there are logger-specific scoped attributes registered in it. Otherwise the program will likely crash. This issue is especially critical in multithreaded application, when one thread may not know whether there are scoped attributes in the logger or there are not. Future releases may solve this limitation but currently the scoped attribute must remain intact until unregistered on leaving the scope.]

Although the described macros are intended to be the primary interface for the functionality, there is also a C++ interface available. It may be useful if the user decides to develop his own macros that cannot be based on the existing ones.

Any scoped attribute is attached to a generic sentry object of type `scoped_attribute`. As long as the sentry exists, the attribute is registered. There are several functions that create sentries for source or thread-specific attributes:

    // Source-specific scoped attribute registration
    template< typename LoggerT >
    [unspecified] add_scoped_logger_attribute(
        LoggerT& l,
        typename LoggerT::attribute_name_type const& name,
        shared_ptr< attribute > const& attr);

    template< typename LoggerT, typename AttributeT >
    [unspecified] add_scoped_logger_attribute(
        LoggerT& l,
        typename LoggerT::attribute_name_type const& name,
        AttributeT& attr);

    // Thread-specific scoped attribute registration
    template< typename CharT >
    [unspecified] add_scoped_thread_attribute(
        basic_attribute_name< CharT > const& name,
        shared_ptr< attribute > const& attr);

    template< typename CharT, typename AttributeT >
    [unspecified] add_scoped_thread_attribute(
        basic_attribute_name< CharT > const& name,
        AttributeT& attr);

Please note that the overloads that accept references to the attribute do not control the life time of the attribute. These overloads can be used to temporarily register attributes that reside on stack or are members of a class - in other words, whose life duration is controlled elsewhere.

An object of the `scoped_attribute` type is able to attach results of each of these functions on its construction. For example, `BOOST_LOG_SCOPED_LOGGER_ATTR(lg, "RunTime", attrs::timer)` can roughly be expanded to this:

    attrs::timer attr;
    attrs::scoped_attribute sentry =
        attrs::add_scoped_logger_attribute(lg, "RunTime", attr);

[endsect]

[endsect]

[endsect]
